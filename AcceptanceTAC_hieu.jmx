<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="AcceptanceTermAndCondition" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1495676943000</longProp>
        <longProp name="ThreadGroup.end_time">1495676943000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AcceptanceTermAndCondition" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/wallet/trackTermAndConditions.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/inputData3-old1.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check ResponseCode" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-546806822">responseCode: ${expected}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2016531130">responseMessage: ${responseMessage}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HealthCheck" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">20</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1495703124000</longProp>
        <longProp name="ThreadGroup.end_time">1495703331000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="REquests" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">100</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1496027702000</longProp>
        <longProp name="ThreadGroup.end_time">1496027702000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FetchMTPwalletUser" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
{&#xd;
    &quot;termsAndConditionsVersion&quot; : &quot;1.0&quot;,&#xd;
    &quot;iamTermsAndConditionsVersion&quot; : &quot;1.0&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/wallet/fetch-wallet.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/Users/hieutran/Desktop/SW/jmeter/inputData2.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,X-USERSTATUS,termsAndConditionsVersion,iamTermsAndConditionsVersion,expected,responseMessage,TC objective,Desc,Steps,Expected Result</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2016531130">responseMessage: ${responseMessage}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-546806822">responseCode: ${expected}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="responseMessage" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2016531130">responseMessage: ${responseMessage}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetCatagory list do" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.1/mobileapp/category/getCategoryList.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/inputData2-CategoryList.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">cbf52d75-29a3-4cd8-8cdb-548cea31a3b7</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2016531130">responseMessage: ${responseMessage}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1754081624">&quot;${expectation}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create category " enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;name&quot; : &quot;drink-link-3&quot;,&#xd;
    &quot;color&quot; : &quot;FF0076&quot;,&#xd;
    &quot;iconId&quot; : &quot;cacola&quot;,&#xd;
    &quot;description&quot; : &quot;option&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/category/createCategory.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/inputData2-CategoryList.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">cbf52d75-29a3-4cd8-8cdb-548cea31a3b7</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2016531130">responseMessage: ${responseMessage}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1754081624">&quot;${expectation}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update category" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;id&quot; : &quot;28a885db-2c01-4e19-9559-fadb7ba8f3af&quot;,&#xd;
     &quot;name&quot; : &quot;drink-link-3&quot;,&#xd;
    &quot;color&quot; : &quot;FF0076&quot;,&#xd;
    &quot;iconId&quot; : null,&#xd;
    &quot;description&quot; : &quot;option&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/category/updateCategory.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/inputData2-CategoryList.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">cbf52d75-29a3-4cd8-8cdb-548cea31a3b7</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2016531130">responseMessage: ${responseMessage}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1754081624">&quot;${expectation}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="delete category" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;categoryId&quot; : &quot;28a885db-2c01-4e19-9559-fadb7ba8f3af&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/category/deleteCategory.do </stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/inputData2-CategoryList.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">cbf52d75-29a3-4cd8-8cdb-548cea31a3b7</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2016531130">responseMessage: ${responseMessage}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1754081624">&quot;${expectation}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBillingCyCle" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/billingcycle/getBillingCycle.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/Users/hieutran/Desktop/SW/jmeter/inputData_GetBillingCycle.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//get Response Time and convert to Interger
def response_time = prev.getTime().toInteger();
 
//define the expected response time
def expected_response_time = 2000;
 
//check the response should not greater than expected time
if (response_time &gt; expected_response_time) {
 prev.setSampleLabel(&quot;The response time is too long&quot;);
 prev.setSuccessful(false);
 prev.setResponseCode(&quot;500&quot;);
 prev.setResponseMessage(&quot;The expected response time is : &quot; + expected_response_time + &quot;ms but it took: &quot; + response_time + &quot;ms&quot;);
}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">da306c67-5b74-4b09-b48f-fb5031f1fc36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1455164878">${expected}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1754081624">&quot;${expectation}&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transaction_one_user" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;statementID&quot; : &quot;14062018991230001&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/transaction/filterTransactionsByStatementID.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/Users/hieutran/Desktop/SW/jmeter/inputData_Transaction.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,walletID,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//get Response Time and convert to Interger
def response_time = prev.getTime().toInteger();
 
//define the expected response time
def expected_response_time = 2000;
 
//check the response should not greater than expected time
if (response_time &gt; expected_response_time) {
 prev.setSampleLabel(&quot;The response time is too long&quot;);
 prev.setSuccessful(false);
 prev.setResponseCode(&quot;500&quot;);
 prev.setResponseMessage(&quot;The expected response time is : &quot; + expected_response_time + &quot;ms but it took: &quot; + response_time + &quot;ms&quot;);
}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">${walletID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1455164878">${expected}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1947264633">20180530</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transaction_10_users" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;statementID&quot; : &quot;14062018991230001&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/transaction/filterTransactionsByStatementID.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/Users/hieutran/Desktop/SW/jmeter/inputData_Transaction_10users.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,walletID,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//get Response Time and convert to Interger
def response_time = prev.getTime().toInteger();
 
//define the expected response time
def expected_response_time = 2000;
 
//check the response should not greater than expected time
if (response_time &gt; expected_response_time) {
 prev.setSampleLabel(&quot;The response time is too long&quot;);
 prev.setSuccessful(false);
 prev.setResponseCode(&quot;500&quot;);
 prev.setResponseMessage(&quot;The expected response time is : &quot; + expected_response_time + &quot;ms but it took: &quot; + response_time + &quot;ms&quot;);
}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">${walletID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1455164878">${expected}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1947264633">20180530</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBllingCycle_one_user" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/billingcycle/getBillingCycle.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/Users/hieutran/Desktop/SW/jmeter/inputData_AccountCycle.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,walletID,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//get Response Time and convert to Interger
def response_time = prev.getTime().toInteger();
 
//define the expected response time
def expected_response_time = 2000;
 
//check the response should not greater than expected time
if (response_time &gt; expected_response_time) {
 prev.setSampleLabel(&quot;The response time is too long&quot;);
 prev.setSuccessful(false);
 prev.setResponseCode(&quot;500&quot;);
 prev.setResponseMessage(&quot;The expected response time is : &quot; + expected_response_time + &quot;ms but it took: &quot; + response_time + &quot;ms&quot;);
}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">${walletID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1455164878">${expected}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1947264633">20180530</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetBllingCycle_10_users" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/billingcycle/getBillingCycle.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/Users/hieutran/Desktop/SW/jmeter/inputData_AccountCycle_10users.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,expectation,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,walletID,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//get Response Time and convert to Interger
def response_time = prev.getTime().toInteger();
 
//define the expected response time
def expected_response_time = 2000;
 
//check the response should not greater than expected time
if (response_time &gt; expected_response_time) {
 prev.setSampleLabel(&quot;The response time is too long&quot;);
 prev.setSuccessful(false);
 prev.setResponseCode(&quot;500&quot;);
 prev.setResponseMessage(&quot;The expected response time is : &quot; + expected_response_time + &quot;ms but it took: &quot; + response_time + &quot;ms&quot;);
}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">${X-USERNAME}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">${User-Agent}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">bear ${bear}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">${walletID}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check responseMessage" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1455164878">${expected}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check field" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1947264633">20180530</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check null is not returned" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3392903">null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GetBillingCycle" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1496197250000</longProp>
        <longProp name="ThreadGroup.end_time">1496197250000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;index&quot; : 0&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">test.vn</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/bankwallet/v1.0/mobileapp/transaction/getListTransactionByAccountID.do</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">&amp;</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/inputData2-GetBillingCycle.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">STT,bear,User-Agent,Content-Type,productVersion,applicationVersion,deviceFingerprint,oem,modelName,modelNo,os,osVersion,handsetID,iccID,screenHeight,screenWidth,timestamp,timezone,locale,locationCoordinates,longitude,latitude,altitude,messageID,deviceTokenID,applicationInstanceID,applicationID,applicationName,X-USERNAME,X-USERSTATUS,termAndConditionsHistoryRequestList,version,termType,expected,responseMessage,objective</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">	import org.json.*;

	
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot;);
	String dfpInput = vars.get(&quot;deviceFingerprint&quot;);
	log.info(&quot;----------Set Device Fingerprint -------------------------&quot; + dfpInput);
	if (dfpInput.contains(&quot;not null&quot;)){
		log.info(&quot;----------Get Device Fingerprint -------------------------&quot;);
		JSONObject dfp = new JSONObject();
		dfp.put(&quot;oem&quot;,vars.get(&quot;oem&quot;));
		dfp.put(&quot;modelName&quot;,vars.get(&quot;modelName&quot;));
		dfp.put(&quot;modelNo&quot;,vars.get(&quot;modelNo&quot;));
		dfp.put(&quot;os&quot;,vars.get(&quot;os&quot;));
		dfp.put(&quot;osVersion&quot;,vars.get(&quot;osVersion&quot;));
		dfp.put(&quot;handsetID&quot;,vars.get(&quot;handsetID&quot;));
		dfp.put(&quot;iccID&quot;,vars.get(&quot;iccID&quot;));
		dfp.put(&quot;screenHeight&quot;,vars.get(&quot;screenHeight&quot;));
		dfp.put(&quot;screenWidth&quot;,vars.get(&quot;screenWidth&quot;));
		vars.put(&quot;deviceFingerprint&quot;,dfp.toString());
		}
	
	
	
	log.info(&quot;----------Set T and C -------------------------&quot;);
	String tacInput = vars.get(&quot;termAndConditionsHistoryRequestList&quot;);
	log.info(&quot;----------Set T and C -------------------------&quot; + tacInput);
	if (tacInput.equals(&quot;null&quot;)){
			JSONObject tac = new JSONObject();
			JSONArray  tacArr= new JSONArray();
			tac.put(&quot;termAndConditionsHistoryRequestList&quot;,tacArr);
			vars.put(&quot;tac&quot;,tac.toString().trim());
		}
	else	if (tacInput.equals(&quot;invalid&quot;)){
			JSONObject tac = new JSONObject();
			tac.put(&quot;termAndConditionsHistoryRequestList&quot;,&quot;ksjdfakd&quot;);
			vars.put(&quot;tac&quot;,tac.toString().trim());
		}
	else if (tacInput.equals(&quot;not found&quot;)) {
		JSONObject tac = new JSONObject();
			JSONArray  tacArr= new JSONArray();
			tac.put(&quot;termAndConditionsHistoryRequestListt&quot;,tacArr);
			vars.put(&quot;tac&quot;,tac.toString().trim());
		}
	else if ( tacInput.contains(&quot;not null&quot;)){
			JSONObject tac = new JSONObject();
			JSONArray  tacArr= new JSONArray();
			JSONObject objTaC1 = new JSONObject();
			JSONObject objTaC2 = new JSONObject();
			String version = vars.get(&quot;version&quot;);
			String term = vars.get(&quot;termType&quot;);
			if( !version.equals(&quot;not found&quot;)) objTaC1.put(&quot;version&quot;,version);
			if( !term.equals(&quot;not found&quot;))objTaC1.put(&quot;termType&quot;,term);
			tacArr.put(objTaC1);
			objTaC2.put(&quot;version&quot;,&quot;1.0&quot;);
			objTaC2.put(&quot;termType&quot;,&quot;IAM&quot;);
			objTaC2.put(&quot; Test Case ID: &quot;,&quot;TC&quot; + vars.get(&quot;STT&quot;) + &quot; - &quot; + vars.get(&quot;objective&quot;)); 
			tacArr.put(objTaC2);
			tac.put(&quot;termAndConditionsHistoryRequestList&quot;,tacArr);
			vars.put(&quot;tac&quot;,tac.toString());
		}
	else	vars.put(&quot;tac&quot;,tacInput);
	</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def dfp = [
	oem				: vars.get(&quot;oem&quot;),
	modelName			: vars.get(&quot;modelName&quot;),
	modelNo			: vars.get(&quot;modelNo&quot;),
	os				: vars.get(&quot;os&quot;),
	osVersion			: vars.get(&quot;osVersion&quot;),
	handsetID			: vars.get(&quot;handsetID&quot;),
	iccID			: vars.get(&quot;iccID&quot;),
	screenHeight		: vars.get(&quot;screenHeight&quot;),
	screenWidth		: vars.get(&quot;screenWidth&quot;)
]

def deviceFingerprint = new groovy.json.JsonBuilder(dfp)
vars.put(&quot;deviceFingerprint&quot;,deviceFingerprint.toString())
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">${Content-Type}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">productVersion</stringProp>
                <stringProp name="Header.value">${productVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">applicationVersion</stringProp>
                <stringProp name="Header.value">${applicationVersion}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceFingerprint</stringProp>
                <stringProp name="Header.value">${deviceFingerprint}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timestamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">timezone</stringProp>
                <stringProp name="Header.value">${timezone}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locale</stringProp>
                <stringProp name="Header.value">${locale}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">messageID</stringProp>
                <stringProp name="Header.value">${messageID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">deviceTokenID</stringProp>
                <stringProp name="Header.value">${deviceTokenID}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERNAME</stringProp>
                <stringProp name="Header.value">linh</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-USERSTATUS</stringProp>
                <stringProp name="Header.value">${X-USERSTATUS}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">SwisscardMobile/1.1.1;iOS/6.0.0;SM-G925F</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">locationCoordinates</stringProp>
                <stringProp name="Header.value">${locationCoordinates}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">walletID</stringProp>
                <stringProp name="Header.value">acb873b5-3664-4057-88d9-3b06de720268</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>false</time>
                <latency>false</latency>
                <timestamp>false</timestamp>
                <success>false</success>
                <label>false</label>
                <code>false</code>
                <message>false</message>
                <threadName>false</threadName>
                <dataType>false</dataType>
                <encoding>false</encoding>
                <assertions>false</assertions>
                <subresults>false</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>false</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
              </value>
            </objProp>
            <stringProp name="filename">/home/linhpham/work/04.Jmeter/Result/samplerResult</stringProp>
          </ResultCollector>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">/*import org.apache.jmeter.services.FileServer;
	import org.apache.commons.io.FileUtils;
	log.info(&quot;-------------------START--------&quot;);

try {
    String content = FileUtils.readFileToString(new File(&quot;/home/linhpham/work/04.Jmeter/Result/samplerResult&quot;));
    
    String responseCode =  content.substring(content.indexOf(&quot;responseCode&quot;)+&quot;responseCode&quot;.length()+ 2, content.indexOf(&quot;responseCode&quot;)+ &quot;responseCode&quot;.length()+ 7);
    log.info(responseCode);
    vars.put(&quot;b&quot;, responseCode);

} catch (Throwable ex) {
    log.info(&quot;Failed to read \&quot;test.xml\&quot; file&quot;, ex);
    throw ex;
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="false">
            <stringProp name="BeanShellAssertion.query">String result = vars.get(&quot;b&quot;);

if( result.contains(&quot;0&quot;){
		return true;
		log.info(result);
	
	} 
	else 
	{return false;}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check if have 4 transactionID" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="484585988">transactionID.*transactionID.*transactionID.*transactionID</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="transaction1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">transaction1</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;transactionID&quot;: &quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="transaction2" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">transaction2</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;transactionID&quot;: &quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">2</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="transaction3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">transaction3</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;transactionID&quot;: &quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">3</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="transaction4" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">transaction4</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;transactionID&quot;: &quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">4</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
